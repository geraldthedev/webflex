{"ast":null,"code":"var React = require('react');\n\nvar d3 = require('d3');\n\nvar forEach = require('lodash.foreach');\n/**\n  Transition Component. It applies transitions on any prop change. Uses D3 interpolator functions underneath.\n\n  @param props.component underlying component that will be initialized and animated\n  @param [props.ease='linear'] easying function between transition states (available options: https://github.com/mbostock/d3/wiki/Transitions#d3_ease)\n  @param [props.duration='500'] duration of the transition\n\n  Usage:\n  <Transition component={\"path\"} ease=\"bounce\" duration=\"500\" className=\"link\" d={diagonal(link)}/>\n */\n\n\nmodule.exports = React.createClass({\n  getDefaultProps: function getDefaultProps() {\n    return {\n      ease: 'cubic-in-out',\n      duration: 400\n    };\n  },\n  startAnimation: function startAnimation() {\n    var start = new Date().getTime(),\n        end = start + parseInt(this.props.duration, 10),\n        finished = false,\n        that = this;\n\n    function animate() {\n      if (finished || that.stopAnimation) {\n        return;\n      }\n\n      var now = t();\n\n      if (now > 1) {\n        now = 1;\n        finished = true;\n      }\n\n      that.animate(now);\n      window.requestAnimationFrame(animate);\n    }\n\n    function t() {\n      var now = new Date().getTime();\n      return (now - start) / (end - start) || 0;\n    }\n\n    animate();\n  },\n  componentWillUnmount: function componentWillUnmount() {\n    // stops the animation in progress\n    this.stopAnimation = true;\n  },\n  getInitialState: function getInitialState() {\n    return this.props;\n  },\n  componentWillReceiveProps: function componentWillReceiveProps(newProps) {\n    var that = this;\n    var interpolators = {};\n    forEach(newProps, function (value, propName) {\n      if (propName === 'component' || propName === 'children' || propName === 'ease' || propName === 'duration' || propName.match(/^on(.+)/)) {\n        return;\n      }\n\n      interpolators[propName] = d3.interpolate(that.state[propName], newProps[propName]);\n    });\n    this.interpolators = interpolators;\n    this.startAnimation();\n  },\n  animate: function animate(t) {\n    var newState = {},\n        ease = d3.ease(this.props.ease);\n    forEach(this.interpolators, function (interpolator, propName) {\n      newState[propName] = interpolator(ease(t));\n    });\n    this.setState(newState);\n  },\n  render: function render() {\n    return React.createElement(this.props.component, this.state, this.props.children);\n  }\n});","map":null,"metadata":{},"sourceType":"script"}
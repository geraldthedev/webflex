{"ast":null,"code":"// Register a service worker to serve assets from local cache.\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\nvar isLocalhost = function isLocalhost() {\n  return Boolean(window.location.hostname === 'localhost' || // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' || // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\n};\n\nexport function register(swUrl, hooks) {\n  if (hooks === void 0) hooks = {};\n  var registrationOptions = hooks.registrationOptions;\n  if (registrationOptions === void 0) registrationOptions = {};\n  delete hooks.registrationOptions;\n\n  var emit = function emit(hook) {\n    var args = [],\n        len = arguments.length - 1;\n\n    while (len-- > 0) {\n      args[len] = arguments[len + 1];\n    }\n\n    if (hooks && hooks[hook]) {\n      hooks[hook].apply(hooks, args);\n    }\n  };\n\n  if ('serviceWorker' in navigator) {\n    window.addEventListener('load', function () {\n      if (isLocalhost()) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, emit, registrationOptions);\n        navigator.serviceWorker.ready.then(function (registration) {\n          emit('ready', registration);\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, emit, registrationOptions);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, emit, registrationOptions) {\n  navigator.serviceWorker.register(swUrl, registrationOptions).then(function (registration) {\n    emit('registered', registration);\n\n    if (registration.waiting) {\n      emit('updated', registration);\n      return;\n    }\n\n    registration.onupdatefound = function () {\n      emit('updatefound', registration);\n      var installingWorker = registration.installing;\n\n      installingWorker.onstatechange = function () {\n        if (installingWorker.state === 'installed') {\n          if (navigator.serviceWorker.controller) {\n            // At this point, the old content will have been purged and\n            // the fresh content will have been added to the cache.\n            // It's the perfect time to display a \"New content is\n            // available; please refresh.\" message in your web app.\n            emit('updated', registration);\n          } else {\n            // At this point, everything has been precached.\n            // It's the perfect time to display a\n            // \"Content is cached for offline use.\" message.\n            emit('cached', registration);\n          }\n        }\n      };\n    };\n  }).catch(function (error) {\n    emit('error', error);\n  });\n}\n\nfunction checkValidServiceWorker(swUrl, emit, registrationOptions) {\n  // Check if the service worker can be found.\n  fetch(swUrl).then(function (response) {\n    // Ensure service worker exists, and that we really are getting a JS file.\n    if (response.status === 404) {\n      // No service worker found.\n      emit('error', new Error(\"Service worker not found at \" + swUrl));\n      unregister();\n    } else if (response.headers.get('content-type').indexOf('javascript') === -1) {\n      emit('error', new Error(\"Expected \" + swUrl + \" to have javascript content-type, \" + \"but received \" + response.headers.get('content-type')));\n      unregister();\n    } else {\n      // Service worker found. Proceed as normal.\n      registerValidSW(swUrl, emit, registrationOptions);\n    }\n  }).catch(function (error) {\n    if (!navigator.onLine) {\n      emit('offline');\n    } else {\n      emit('error', error);\n    }\n  });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(function (registration) {\n      registration.unregister();\n    });\n  }\n}","map":null,"metadata":{},"sourceType":"module"}